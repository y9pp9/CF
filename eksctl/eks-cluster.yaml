# eksctl create cluster -f eks-cluster.yaml
--- 
apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: demo-1-21
  region: us-west-1
  version: "1.21"
#iam:
#  serviceRoleARN: "arn:aws:iam::117321792344:role/eksctl-dev-cluster-cluster-ServiceRole-U5A3UWKB97ZN"
vpc:
  id: "vpc-09432f1b071a4f465"  # (optional, must match VPC ID used for each subnet below)
  cidr: "10.0.0.0/16"       # (optional, must match CIDR used by the given VPC)
  subnets:
    # must provide 'private' and/or 'public' subnets by availibility zone as shown
    private:
      us-west-1a:
        id: "subnet-03a30cc9b0968fc41"
        cidr: "10.0.1.0/24" # (optional, must match CIDR used by the given subnet)
      us-west-1b:
        id: "subnet-029fec5a5b85f4136"
        cidr: "10.0.2.0/24"  # (optional, must match CIDR used by the given subnet)
    public:
      us-west-1a:
        id: "subnet-0504dc6629f1891c2"
        cidr: "10.0.10.0/24" # (optional, must match CIDR used by the given subnet)
      us-west-1b:
        id: "subnet-07574fb1456f3690c"
        cidr: "10.0.20.0/24"  # (optional, must match CIDR used by the given subnet)
#  clusterEndpoints:
#    publicAccess: false
#    privateAccess: true

managedNodeGroups:
  - name: nodegroup
    minSize: 2
    maxSize: 2
#    securityGroups:
#      attachIDs: ["sg-0f7152d95a0d6c04d"]
    privateNetworking: true # if only 'Private' subnets are given, this must be enabled
#    iam:
#        instanceRoleARN: "arn:aws:iam::117321792344:role/eksctl-dev-cluster-nodegroup-dev-NodeInstanceRole-14HCJ8OH80K1"
    ssh: # use existing EC2 key
      allow: false
      #publicKeyName: demo-keypair
    instanceTypes: ["t3.small"] # At least one instance type should be specified
    spot: true
    tags:
      "Architecture": "x86"
